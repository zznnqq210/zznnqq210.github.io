<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java函数式编程利器 --- vavr</title>
    <url>/2020/08/26/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%88%A9%E5%99%A8%20---%20vavr/</url>
    <content><![CDATA[<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h4 id="1-什么是函数式编程"><a href="#1-什么是函数式编程" class="headerlink" title="1. 什么是函数式编程"></a>1. 什么是函数式编程</h4><p>&ensp;&ensp;&ensp;&ensp;函数式编程是种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda&ensp;calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。和指令式编程相比，函数式编程强调函数的计算比指令的执行重要。和过程化编程相比，函数式编程里函数的计算可随时调用。</p>
<h4 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h4><p>&ensp;&ensp;&ensp;&ensp;闭包就是能够读取其他函数内部变量的函数。例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p>
<h4 id="3-可变集合与不可变集合"><a href="#3-可变集合与不可变集合" class="headerlink" title="3. 可变集合与不可变集合"></a>3. 可变集合与不可变集合</h4><p>&ensp;&ensp;&ensp;&ensp;顾名思义，一个可变（mutable）集合能够更新甚至扩展空间，这意味着你能改变，增加，或者删除一个集合的元素。一个不可变（immutable）集合，刚好相反，不能改变。你仍然可以做一些类似的增加，删除，或者更新，但是实际上它返回了一个新的对象，这里面就是指返回了一个新的集合，而老的集合没有改变。</p>
<h4 id="4-元组"><a href="#4-元组" class="headerlink" title="4. 元组"></a>4. 元组</h4><p>&ensp;&ensp;&ensp;&ensp;元组（tuple）是一种不可变数据集的组合，与集合不同的是元组可以存放不同的数据类型，根据存储的数据个数可分为二元组、三元组、四元组……</p>
<h4 id="5-链式编程"><a href="#5-链式编程" class="headerlink" title="5. 链式编程"></a>5. 链式编程</h4><p>&ensp;&ensp;&ensp;&ensp;所谓的链式编程就是可以通过”点”语法，将需要执行的代码块连续的书写下去，使得代码简单易读，书写方便。</p>
<h4 id="6-惰性求值"><a href="#6-惰性求值" class="headerlink" title="6. 惰性求值"></a>6. 惰性求值</h4><p>&ensp;&ensp;&ensp;&ensp;在开发中，我们经常会遇到一些需要延迟计算的情形，比如某些运算非常消耗资源，如果提前算出来却没有用到，会得不偿失。在计算机科学中，有个专门的术语形容它：惰性求值。惰性求值是一种求值策略，也就是把求值延迟到真正需要的时候。</p>
<h4 id="7-柯里化（Currying）"><a href="#7-柯里化（Currying）" class="headerlink" title="7. 柯里化（Currying）"></a>7. 柯里化（Currying）</h4><p>&ensp;&ensp;&ensp;&ensp;在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>
<h3 id="8-偏函数（partial-function）"><a href="#8-偏函数（partial-function）" class="headerlink" title="8. 偏函数（partial function）"></a>8. 偏函数（partial function）</h3><p>&ensp;&ensp;&ensp;&ensp;对给定的输入参数类型，偏函数只能接受该类型的某些特定的值。</p>
<h3 id="9-Functor、Monad、Applicative"><a href="#9-Functor、Monad、Applicative" class="headerlink" title="9. Functor、Monad、Applicative"></a>9. Functor、Monad、Applicative</h3><hr>
<h2 id="vavr相关"><a href="#vavr相关" class="headerlink" title="vavr相关"></a>vavr相关</h2><h4 id="vavr库层次结构"><a href="#vavr库层次结构" class="headerlink" title="vavr库层次结构"></a>vavr库层次结构</h4><p><img src="/images/vavr.png" alt="vavr"></p>
<blockquote>
<ul>
<li>Option(Some None)</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; maybeFoo = Optional.of(<span class="string">&quot;foo&quot;</span>); </span><br><span class="line">then(maybeFoo.get()).isEqualTo(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; maybeFooBar = maybeFoo.map(s -&gt; (String)<span class="keyword">null</span>)  </span><br><span class="line">                                       .map(s -&gt; s.toUpperCase() + <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">then(maybeFooBar.isPresent()).isFalse();</span><br><span class="line"></span><br><span class="line">Option&lt;String&gt; maybeFoo = Option.of(<span class="string">&quot;foo&quot;</span>); </span><br><span class="line">then(maybeFoo.get()).isEqualTo(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    maybeFoo.map(s -&gt; (String) <span class="keyword">null</span>) <span class="comment">// Some(null)</span></span><br><span class="line">            .map(s -&gt; s.toUpperCase() + <span class="string">&quot;bar&quot;</span>); </span><br><span class="line">    Assert.fail();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">    <span class="comment">// this is clearly not the correct approach</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Tuple（元组）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建元组</span></span><br><span class="line"><span class="comment">// (Java, 8)</span></span><br><span class="line">Tuple2&lt;String, Integer&gt; java8 = Tuple.of(<span class="string">&quot;Java&quot;</span>, <span class="number">8</span>); </span><br><span class="line"><span class="comment">// &quot;Java&quot;</span></span><br><span class="line">String _1 = java8._1; </span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line">Integer _2 = java8._2; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (vavr, 1)</span></span><br><span class="line">Tuple2&lt;String, Integer&gt; that = java8.map(</span><br><span class="line">        s -&gt; s.substring(<span class="number">2</span>) + <span class="string">&quot;vr&quot;</span>,</span><br><span class="line">        i -&gt; i / <span class="number">8</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (vavr, 1)</span></span><br><span class="line">Tuple2&lt;String, Integer&gt; that = java8.map(</span><br><span class="line">        (s, i) -&gt; Tuple.of(s.substring(<span class="number">2</span>) + <span class="string">&quot;vr&quot;</span>, i / <span class="number">8</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;vavr 1&quot;</span></span><br><span class="line">String that = java8.apply(</span><br><span class="line">        (s, i) -&gt; s.substring(<span class="number">2</span>) + <span class="string">&quot;vr &quot;</span> + i / <span class="number">8</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Functions</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.apply(1, 2) = 3</span></span><br><span class="line">Function2&lt;Integer, Integer, Integer&gt; sum = (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Function3.of to create</span></span><br><span class="line">Function3&lt;String, String, String, String&gt; function3 =</span><br><span class="line">        Function3.of(<span class="keyword">this</span>::methodWhichAccepts3Parameters);</span><br><span class="line">       </span><br><span class="line"><span class="comment">// 组合函数（y = f(x); g(y) = g(f(x))）</span></span><br><span class="line">Function1&lt;Integer, Integer&gt; plusOne = a -&gt; a + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Function1&lt;Integer, Integer&gt; multiplyByTwo = a -&gt; a * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// andThen a -&gt; (a + 1) * 2</span></span><br><span class="line">Function1&lt;Integer, Integer&gt; add1AndMultiplyBy2 = plusOne.andThen(multiplyByTwo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// compose</span></span><br><span class="line">Function1&lt;Integer, Integer&gt; add1AndMultiplyBy2 = multiplyByTwo.compose(plusOne);</span><br><span class="line"></span><br><span class="line">then(add1AndMultiplyBy2.apply(<span class="number">2</span>)).isEqualTo(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lift</span></span><br><span class="line"><span class="comment">// partial function</span></span><br><span class="line">Function2&lt;Integer, Integer, Integer&gt; divide = (a, b) -&gt; a / b;</span><br><span class="line"></span><br><span class="line">Function2&lt;Integer, Integer, Option&lt;Integer&gt;&gt; safeDivide = Function2.lift(divide);</span><br><span class="line"></span><br><span class="line"><span class="comment">// = None</span></span><br><span class="line">Option&lt;Integer&gt; i1 = safeDivide.apply(<span class="number">1</span>, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// = Some(2)</span></span><br><span class="line">Option&lt;Integer&gt; i2 = safeDivide.apply(<span class="number">4</span>, <span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// partial application</span></span><br><span class="line">Function5&lt;Integer, Integer, Integer, Integer, Integer, Integer&gt; sum = (a, b, c, d, e) -&gt; a + b + c + d + e;</span><br><span class="line"><span class="comment">// fix a, b, c</span></span><br><span class="line">Function2&lt;Integer, Integer, Integer&gt; add6 = sum.apply(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">then(add6.apply(<span class="number">4</span>, <span class="number">3</span>)).isEqualTo(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Currying</span></span><br><span class="line">Function3&lt;Integer, Integer, Integer, Integer&gt; sum = (a, b, c) -&gt; a + b + c;</span><br><span class="line">Function1&lt;Integer, Function1&lt;Integer, Integer&gt;&gt; add2 = sum.curried().apply(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">then(add2.apply(<span class="number">4</span>).apply(<span class="number">3</span>)).isEqualTo(<span class="number">9</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Try(Success Failure)</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// no need to handle exceptions</span></span><br><span class="line">Try.of(() -&gt; bunchOfWork()).getOrElse(other);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> io.vavr.API.*;        <span class="comment">// $, Case, Match</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> io.vavr.Predicates.*; <span class="comment">// instanceOf</span></span><br><span class="line"></span><br><span class="line">A result = Try.of(<span class="keyword">this</span>::bunchOfWork)</span><br><span class="line">    .recover(x -&gt; Match(x).of(</span><br><span class="line">        Case($(instanceOf(Exception_1.class)), t -&gt; somethingWithException(t)),</span><br><span class="line">        Case($(instanceOf(Exception_2.class)), t -&gt; somethingWithException(t)),</span><br><span class="line">        Case($(instanceOf(Exception_n.class)), t -&gt; somethingWithException(t))</span><br><span class="line">    ))</span><br><span class="line">    .getOrElse(other);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path = Try.ofCallable(file::getCanonicalPath)</span><br><span class="line">    .getOrElseThrow(t -&gt; <span class="keyword">new</span> CrashException(<span class="string">&quot;Error accure.&quot;</span>, t))</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Lazy</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lazy&lt;Double&gt; lazy = Lazy.of(Math::random);</span><br><span class="line">lazy.isEvaluated(); <span class="comment">// = false</span></span><br><span class="line">lazy.get();         <span class="comment">// = 0.123 (random generated)</span></span><br><span class="line">lazy.isEvaluated(); <span class="comment">// = true</span></span><br><span class="line">lazy.get();         <span class="comment">// = 0.123 (memoized)</span></span><br><span class="line"></span><br><span class="line">CharSequence chars = Lazy.val(() -&gt; <span class="string">&quot;Yay!&quot;</span>, CharSequence.class);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Either(Left Right)</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If the result of compute() is Right(1), the value is Right(2).</span></span><br><span class="line"><span class="comment">// If the result of compute() is Left(&quot;error&quot;), the value is Left(&quot;error&quot;).</span></span><br><span class="line">Either&lt;String,Integer&gt; value = compute().right().map(i -&gt; i * <span class="number">2</span>).toEither();</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Future</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// future *value*, result of an async calculation</span></span><br><span class="line">Future&lt;T&gt; future = Future.of(...);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Validation（Valid Invalid）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonValidator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VALID_NAME_CHARS = <span class="string">&quot;[a-zA-Z ]&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_AGE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Validation&lt;Seq&lt;String&gt;, Person&gt; validatePerson(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">return</span> Validation.combine(validateName(name), validateAge(age)).ap(Person::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Validation&lt;String, String&gt; <span class="title">validateName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CharSeq.of(name).replaceAll(VALID_NAME_CHARS, <span class="string">&quot;&quot;</span>).transform(seq -&gt; seq.isEmpty()</span><br><span class="line">                ? Validation.valid(name)</span><br><span class="line">                : Validation.invalid(<span class="string">&quot;Name contains invalid characters: &#x27;&quot;</span></span><br><span class="line">                + seq.distinct().sorted() + <span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Validation&lt;String, Integer&gt; <span class="title">validateAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt; MIN_AGE</span><br><span class="line">                ? Validation.invalid(<span class="string">&quot;Age must be at least &quot;</span> + MIN_AGE)</span><br><span class="line">                : Validation.valid(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PersonValidator personValidator = <span class="keyword">new</span> PersonValidator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Valid(Person(John Doe, 30))</span></span><br><span class="line">Validation&lt;Seq&lt;String&gt;, Person&gt; valid = personValidator.validatePerson(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invalid(List(Name contains invalid characters: &#x27;!4?&#x27;, Age must be greater than 0))</span></span><br><span class="line">Validation&lt;Seq&lt;String&gt;, Person&gt; invalid = personValidator.validatePerson(<span class="string">&quot;John? Doe!4&quot;</span>, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>List</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(</span><br><span class="line">  <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;PHP&quot;</span>, <span class="string">&quot;Jquery&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;JShell&quot;</span>, <span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// List(Jquery, JavaScript, JShell, JAVA)</span></span><br><span class="line">List list1 = list.drop(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// List(Java, PHP, Jquery, JavaScript)</span></span><br><span class="line">List list2 = list.dropRight(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// List(JShell, JAVA)</span></span><br><span class="line">List list3 = list.dropUntil(s -&gt; s.contains(<span class="string">&quot;Shell&quot;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// List(PHP, Jquery, JavaScript, JShell, JAVA)</span></span><br><span class="line">List list4 = list.dropWhile(s -&gt; s.length() &gt;= <span class="number">4</span>); </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Stream</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2, 4, 6, ...</span></span><br><span class="line">Stream.from(<span class="number">1</span>).filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Pattern Matching</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> io.vavr.API.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> io.vavr.Patterns.*;</span><br><span class="line"></span><br><span class="line">String s = Match(i).of(</span><br><span class="line">    Case($(<span class="number">1</span>), <span class="string">&quot;one&quot;</span>),</span><br><span class="line">    Case($(<span class="number">2</span>), <span class="string">&quot;two&quot;</span>),</span><br><span class="line">    Case($(), <span class="string">&quot;?&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">String s = Match(i).of(</span><br><span class="line">    Case($(is(<span class="number">1</span>)), <span class="string">&quot;one&quot;</span>),</span><br><span class="line">    Case($(is(<span class="number">2</span>)), <span class="string">&quot;two&quot;</span>),</span><br><span class="line">    Case($(), <span class="string">&quot;?&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Match(option).of(</span><br><span class="line">    Case($Some($()), <span class="string">&quot;defined&quot;</span>),</span><br><span class="line">    Case($None(), <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="vavr应用实例"><a href="#vavr应用实例" class="headerlink" title="vavr应用实例"></a>vavr应用实例</h2><blockquote>
<ol>
<li>经典word count问题（取出词频最高的前10条数据）</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String content = <span class="string">&quot;Please send this message to those people who mean something to you,&quot;</span></span><br><span class="line">				+ <span class="string">&quot; to those who have touched your life in one way or another, to those who make you smile &quot;</span></span><br><span class="line">				+ <span class="string">&quot;when you really need it, to those that make you see the brighter side of things when you are &quot;</span></span><br><span class="line">				+ <span class="string">&quot;really down, to those who you want to let them know that you appreciate their friendship. &quot;</span></span><br><span class="line">				+ <span class="string">&quot;And if you don’t, don’t worry,nothing bad will happen to you,you will just miss out on the &quot;</span></span><br><span class="line">				+ <span class="string">&quot;opportunity to brighten someone’s day with this message.&quot;</span>;</span><br><span class="line">String[] arr = content.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">List.of(content.split(<span class="string">&quot;\\s+&quot;</span>)).map(String::trim)</span><br><span class="line">    .groupBy(s -&gt; s).mapValues(List::size)</span><br><span class="line">	.toList().sortBy(t -&gt; -t._2()).take(<span class="number">10</span>)</span><br><span class="line">	.forEach(tup -&gt; System.out.println(tup._1 + <span class="string">&quot;-----&quot;</span> + tup._2));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.求阶乘 n! = 1×2×3…×n</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> n = List.rangeClosed(<span class="number">1</span>, number).reduce((x, y) -&gt; x * y);</span><br><span class="line"><span class="comment">// 720</span></span><br><span class="line">System.out.println(n);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.找出100个人中年龄在28岁及以上的男性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="comment">// genger true: 男性 false 女性</span></span><br><span class="line">List.rangeClosed(<span class="number">1</span>, <span class="number">100</span>).map(i -&gt; <span class="keyword">new</span> Person(<span class="string">&quot;aaa&quot;</span>, random.nextInt(<span class="number">100</span>), random.nextBoolean()))</span><br><span class="line">	.filter(p -&gt; p.getAge() &gt;= <span class="number">28</span> &amp;&amp; p.isGender()).toJavaList();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java技术</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/08/24/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Diary</category>
        <category>PlayStation</category>
        <category>Games</category>
        <category>Life</category>
      </categories>
      <tags>
        <tag>hello</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
